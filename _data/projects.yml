- layout: left
  name: Tennist
  github: Soda-Flavour/tennist-backend
  github_title: tennist-backend
  github2: /Soda-Flavour/tennist_flutter
  github2_title: tennist-frontend
  quote: 테니스에 라켓 및 라켓 튜닝 정보를 공유할 수 있는 앱
  description: | # this will include new lines to allow paragraphs
    <mark>Flutter</mark> 를 통한 하이브리드 앱개발을 통해 진행되었습니다. <mark>Node.JS</mark> 로 만들어진 API 기반으로 데이터를 표시하며,  <mark>token</mark> 을 사용한 로그인이 구현되어있습니다.
    <mark>Knex.js</mark> 라이브러리를 사용하여, 마이그레이션 및 시드 파일을 생성, 이를 통해 데이터베이스의 생성 및 수정을 유연하게 할수 있습니다..

- layout: left
  name: 동시통역 앱
  # github: Soda-Flavour/tennist-Server
  # github_title: tennist-Server
  quote: >
    실시간으로 통역사의 통역을 청취할 수 있는 앱
  description: | # this will include new lines to allow paragraphs
    - 기획
      - 통역사와 청취자의 분리를 위해 2개의 앱을 기획하였으며, 해당 앱들의 설정을 위해 웹 관리자를 기획했습니다.

    - 프론트 앤드
      - <mark>Flutter</mark>를 통한 하이브리드 앱 개발을 통해 진행되었습니다.  <mark>WebRTC</mark>를 기반으로 하여 딜레이 없이 실시간으로 청취가 가능합니다.
        <mark>i18n</mark>을 통한 2개국어(한국어, 영어)를 지원하도록 만들었습니다.


    - 백앤드
      - <mark>NodeJS</mark>를 사용하여 구현되었습니다. API 방식으로 프론트서버와 통신하며, <mark>Access Token</mark> 및 <mark>Refresh Token</mark>을 사용하여 로그인 여부를 확인하였습니다. 토큰 만료 시간을 이용하여 토큰을 자동으로 갱신하도록 구현하였습니다(프론트와 연계).
      - 빠른 개발을 위하여 각각 API의 단위 앤드 포인트(Notice, Find등)들을 서브 컨트롤러를 포함한 폴더별로 분리했으며,  CRUD의 기능은 하나의 메인 컨트롤러를 상속받은 각각의 서브 컨트롤러(폴더내의)를 사용하도록 구현했습니다. 서브 컨트롤러에는 CRUD시 컬럼에 대한 세팅(쓰기 가능, 읽기가능,  유효성 검사, 노출 컬럼명 변경등)에 대한 설정정보를 저장하며, CRUD 작업은 메인컨트롤러에서 상속받아 수행하도록 했습니다. 이를 통해, 페이지가 늘어남에 따라 반복되는 작업을 줄여 작업시간을 단축하였습니다. 예외적인 기능은 서브컨트롤러에 추가하여 동작하도록 했습니다.
      - 단위 앤드 포인트에 대한 설정 객체 파일을 만들어 필요하면, 폴더를 자동으로 생성하도록 했습니다.
      - 프론트에서 2개의 언어를 지원하기 때문에, 에러 메시지 또한 프론트에서 분기할 수 있도록 하였습니다. 따라서 서버에서 에러코드 한곳에서 관리하여 전달할 수 있도록 하였습니다.  에러 코드 객체를 생성, 프론트에서 해당 에러 코드를 사용하여 에러 처리(Dialog등)을 할 수 있게 하였으며, 필요하면 DB에 해당 에러를 기록할 수 있도록 했습니다.
      - 이미지 파일 컨트롤러를 만들어 이미지 리사이징 및 저장을 구현하였습니다. 이미지를 전달받으면 서버에 세팅된 사이즈 값에 따라 이미지를 대,중,소로 변환하고 각각의 폴더에 파일명을 변환하여 저장하도록 했습니다.
      - <mark>WebRTC</mark> 기능을 사용하기 위한 프론트 화면을 만들었습니다. <mark>Janus</mark> 라이브러리를 기반으로 동작하며, 프론트와 통신은 <mark>Javascript</mark>를 통하여 할수 있도록 구현하였습니다.

    -서버
      - API 서버는 <mark>네이버 클라우드 서버</mark>에서 <mark>Ubuntu</mark> 상의 <mark>apache2</mark> 웹서버를 사용했습니다. <mark>SSL</mark>를 적용했습니다.
      - <mark>WebRTC</mark>를 사용하기 위해 <mark>Janus 및 Coturn 서버</mark>를 통합하여 구축했습니다.
