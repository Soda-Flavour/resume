- layout: left
  name: Tennist
  github: Soda-Flavour/tennist-backend
  github_title: Backend
  github2: /Soda-Flavour/tennist_flutter
  github2_title: Frontend
  quote: 테니스에 라켓 및 라켓 튜닝 정보를 공유할 수 있는 앱
  description: | # this will include new lines to allow paragraphs
    - 프론트 앤드
      -Flutter를 통한 하이브리드 앱개발을 통해 진행되었습니다. API 호출을 기반으로 데이터를 표시하며, access token을 사용한 로그인이 구현되어있습니다.

    - DB (깃 허브의 README.md에 설계 이미지가 첨부)
      - Knex,js 라이브러리를 사용하여, 마이그레이션 및 시드 파일을 생성했습니다. 이를 통해 데이터베이스의 생성 및 수정을 유연하게 진행할 수 있습니다.
      - 마이그레이션 파일의 순서를 구성하여 테이블 간의 관계(외래키)를 생성할 수 있도록 했습니다.
      - Knex.js 및 Objection.js (ORM)를 사용하여 쿼리를 구성했습니다.(현재 Objection.js의 러닝 커브로 인하여 knex를 통한 쿼링을 주로 하고 있습니다. 만약, DB 설계에 따라 kenx를 통한 쿼리를 주로 사용하게 된다면 ORM를 사용하지 않고,  쿼리 파일 모듈을 분리하여 구성하는것도 생각하고 있습니다.)

    - 백앤드
      - NodeJS를 사용하여 구현했습니다. API 방식으로 프론트서버와 통신하며, Access Token을 사용하여 로그인 여부를 확인합니다.
      - 토큰 검증 미들웨어와 로그인 검증 미들웨어를 통해 로그인 여부를 확인합니다.  토큰 검증 미들웨어는 에러를 전달하지 않고, 토큰의 여부만 확인할 수 있도록 하여 의미를 명확하게 하기 위해 로그인 검증과 분리하였습니다.
      - 라우터를 중심으로 데이터를 처리합니다. 미들웨어를 통해 에러를 한곳에서 받아 처리합니다. 에러 발생 시 에러코드 객체 및 모듈을 통해 해당 정보를 전달하도록 구성했습니다.
      - 유저 인증 및 라켓회사에 대해서는  supertest를 통한 TDD를 진행했습니다.
      - 협업에 대한 대비:  간결한 코드는 필수이지만,  라우터에서 컨트롤러를 분산하는 것은 오히려 다른 개발자가 코드를 봤을 때, 이해에 걸리는 시간이 길어질 수 있다고 생각했습니다. 따라서 라우터 내에서 async/await 를 사용하여, 최대한 하나의 라우터 흐름내에서 이해하게 쉽게 코딩하려 노력했습니다. 이전 프로젝트에서 메인 컨트롤러 클래스를 사용하여 CRUD를 통합하는 것이 협업에서는 여러 가지 상황에 대비하기 어려워 결국 서브 클래스를 통한 구현이 많아질 것으로 생각했습니다. 따라서 필요 기능들을 미들웨어 방식이나 모듈화시킨 함수를 사용하는 것이 NodeJs 코딩에 알맞으며, 좀 더 쉽게 이해될 것이라 판단했습니다.

- layout: left
  name: Mori (실시간 통역 앱)
  # github: Soda-Flavour/tennist-Server
  # github_title: tennist-Server
  quote: >
    실시간으로 통역사의 통역을 청취할 수 있는 앱
  description: | # this will include new lines to allow paragraphs
    - 기획
      - 통역사와 청취자의 분리를 위해 2개의 앱을 기획하였으며, 해당 앱들의 설정을 위해 웹 관리자를 기획했습니다.

    - 프론트 앤드
      - <mark>Flutter</mark>를 통한 하이브리드 앱 개발을 통해 진행되었습니다.  <mark>WebRTC</mark>를 기반으로 하여 딜레이 없이 실시간으로 청취가 가능합니다.
        <mark>i18n</mark>을 통한 2개국어(한국어, 영어)를 지원하도록 만들었습니다.


    - 백앤드
      - <mark>NodeJS</mark>를 사용하여 구현되었습니다. API 방식으로 프론트서버와 통신하며, <mark>Access Token</mark> 및 <mark>Refresh Token</mark>을 사용하여 로그인 여부를 확인하였습니다. 토큰 만료 시간을 이용하여 토큰을 자동으로 갱신하도록 구현하였습니다(프론트와 연계).
      - 빠른 개발을 위하여 각각 API의 단위 앤드 포인트(Notice, Find등)들을 서브 컨트롤러를 포함한 폴더별로 분리했으며,  CRUD의 기능은 하나의 메인 컨트롤러를 상속받은 각각의 서브 컨트롤러(폴더내의)를 사용하도록 구현했습니다. 서브 컨트롤러에는 CRUD시 컬럼에 대한 세팅(쓰기 가능, 읽기가능,  유효성 검사, 노출 컬럼명 변경등)에 대한 설정정보를 저장하며, CRUD 작업은 메인컨트롤러에서 상속받아 수행하도록 했습니다. 이를 통해, 페이지가 늘어남에 따라 반복되는 작업을 줄여 작업시간을 단축하였습니다. 예외적인 기능은 서브컨트롤러에 추가하여 동작하도록 했습니다.
      - 단위 앤드 포인트에 대한 설정 객체 파일을 만들어 필요하면, 폴더를 자동으로 생성하도록 했습니다.
      - 프론트에서 2개의 언어를 지원하기 때문에, 에러 메시지 또한 프론트에서 분기할 수 있도록 하였습니다. 따라서 서버에서 에러코드 한곳에서 관리하여 전달할 수 있도록 하였습니다.  에러 코드 객체를 생성, 프론트에서 해당 에러 코드를 사용하여 에러 처리(Dialog등)을 할 수 있게 하였으며, 필요하면 DB에 해당 에러를 기록할 수 있도록 했습니다.
      - 이미지 파일 컨트롤러를 만들어 이미지 리사이징 및 저장을 구현하였습니다. 이미지를 전달받으면 서버에 세팅된 사이즈 값에 따라 이미지를 대,중,소로 변환하고 각각의 폴더에 파일명을 변환하여 저장하도록 했습니다.
      - <mark>WebRTC</mark> 기능을 사용하기 위한 프론트 화면을 만들었습니다. <mark>Janus</mark> 라이브러리를 기반으로 동작하며, 프론트와 통신은 <mark>Javascript</mark>를 통하여 할수 있도록 구현하였습니다.

    - 서버
      - API 서버는 <mark>네이버 클라우드 서버</mark>에서 <mark>Ubuntu</mark> 상의 <mark>apache2</mark> 웹서버를 사용했습니다. <mark>SSL</mark>를 적용했습니다.
      - <mark>WebRTC</mark>를 사용하기 위해 <mark>Janus 및 Coturn 서버</mark>를 통합하여 구축했습니다.

- layout: left
  name: 꿀발리(여행스케줄)
  link: http://www.kkulbali.com/
  # github: Soda-Flavour/tennist-Server
  # github_title: tennist-Server
  quote: >
    지도를 기반으로한 발리 여행일정 만들기
  description: | # this will include new lines to allow paragraphs
    - 기획
      - 사용자가 예약을 스텝별로 작성하고 관리자에게 전달되도록 했습니다.
      - 기본 정보를 입력하고 관리하기 위한 웹 관리자를 구성했으며, 관리자에서 사용자의 요청사항을 확인 할 수 있도록 했습니다.

    - 백앤드
      - <mark>PHP</mark>를 기반으로 개발했습니다. Alto Router 라이브러리를 기반으로 한 라우터 중심의 개발을 진행했습니다.
      - 라우터, 컨트롤러, 뷰 폴더를 각각 생성했으며, 라우터 폴더에 기능별 라우터 파일을 만들어, 컨트롤러의 작업을 수행하고 뷰로 전달 할 수 있도록 구성했습니다.
      - 개발에서 아쉬웠던 점은 각각 기능별(auth, dashboard, notice등)로 컨트롤러가 나누어져 중복되는 코드가 있었습니다(예, 리스트로딩) 물론 커스텀한 기능이 많았지만, 코드의 재사용성이 낮았다고 평가합니다.  에이전시의 업무 특성상 외주 업무를 주로 진행하였기 때문에, 코드의 재사용성이 매우 중요했습니다. 따라서 이후 개발에서는 메인 컨트롤러를 각각의 서브 컨트롤러가 상속받는 방법, 컨트롤러와 라우터 뷰를 하나의 폴더로 묶는 방법 등으로 프로젝트를 구성했습니다.

- layout: left
  name: 배네스템
  link: https://benestem.com/
  # github: Soda-Flavour/tennist-Server
  # github_title: tennist-Server
  quote: >
    바이어를 대상으로한 4개국어 소개 홈페이지
  description: | # this will include new lines to allow paragraphs
    - 프론트 앤드
      - 반응형으로 홈페이지를 구성했습니다.
      - 클라이언트가 잡지 또는 팸플릿 같은 느낌을 원했기 때문에 협업한 디자인 회사와 요구사항과 웹에 최적화된 상황의 최적점을 찾는 데 노력했습니다.


    - 백앤드
      - <mark>PHP</mark>를 기반으로 개발했습니다. Alto Router 라이브러리를 기반으로 한 라우터 중심의 개발을 진행했습니다.
      - 클라이언트의 요청 중, '접속자의 위치에 따라 홈페이지의 언어가 자동으로 변경되게 하고 싶다'라는 요청이 있었습니다. 따라서 유저의 아이피를 확인하여 curl을 통해 KISA에서 접속국가 코드를 받아 자동으로 언어가 변경되도록 했습니다.
      - 언어별로 문장의 길이와 크기가 달라서 view 화면을 4개의 파일로 나누어 개발했습니다. 언어별 문장을 객체화시켜 넣는 방법도 생각했지만, 이후 유지보수에서  백앤드 부분보다 퍼블리싱 부분의 빈번한 수정이 예상되었기 때문입니다. 결과적으로 4개로 나뉘어 진행한 것이 유지보수에서 더욱 빠른 수정을 가능하게 했고, 모든 것을 간단하게 하고  통합하는것보다, 이후 유지보수 상황을 생각하고 개발하는 것이 중요하다고 다시 한 번 느꼈습니다.

- layout: left
  name: 어디고 (라이드 쉐어링)
  # link: https://basic.yoons.com/
  # github: Soda-Flavour/tennist-Server
  # github_title: tennist-Server
  quote: >
    라이드 쉐어링 서비스
  description: | # this will include new lines to allow paragraphs
    - 기획
      - 입사 당시 운행에 관련된 부분의 기본 틀은 완성되어 있었습니다. 하지만, 다른 카풀앱들과 비교했을 때, 한국에서 서비스하기에는 무리가 있는 UI와 결제방법, 우리나라의 법적인 요소 때문인 인증 로직이 없는 상태였기 때문에 해당 부분을 기획했습니다.
      - 해당 기획을 반영한 와이어 프레임을 제작하여, 전체적인 프로세스를 파악할 수 있도록 했습니다.
      - 드라이버 인증에 상당히 많은 서류와 변수(사용자 상태에 따른 문서들이 다름)들이 존재했고, 사용자 측면에서 해당 작업들의 거부감을 줄이기 위해 페이지 UI 구성을 했습니다.

    - 개발
      - 홈페이지는 워드 프레스로 구성했으며, 드라이버의 사전 모집을 위해 카카오 비즈 톡 API을 사용한 모집 기능을 PHP로 구현했습니다.

    - 커뮤니케이션
      - 개발팀이 베트남에 있었고, 해당 국가의 인원들로 구성되어, 소통에 애로 사항이 많았습니다.
      - API를 번역하여 전달하는 등의 개발 부분에서는 큰 문제가 없었지만, UI의 구성이나 법적인 요소 때문에 추가로 개발되어야 하는 부분을 이해할 수 있도록 하는 부분에서 많은 회의를 진행했습니다. 모든 인원이 해당 앱의 완성도를 높이기 위하여 소통하는 과정이었기 때문에 긍정적인 요소로 작용했다고 생각합니다.
      - 클라이언트의 의도와 요청을 주로 해결하는 외주 업무와 달리, 내부의 서비스를 목표로 하는 프로젝트이었기 때문에, 기획 등 여러 가지 회의 업무에 참여하여 소통하는 것이 좋았습니다.

- layout: left
  name: 윤선생 베이직
  link: https://basic.yoons.com/
  # github: Soda-Flavour/tennist-Server
  # github_title: tennist-Server
  quote: >
    영어 학습 상품을 구매하고 관리하는 홈페이지
  description: | # this will include new lines to allow paragraphs
    - 백앤드
      - <mark>Java</mark>를 기반으로 개발했습니다.
      - 디자인, 퍼블리싱, 기존 시스템 개발과 같이 협업으로 진행했기 때문에 원활할 소통을 하기 위해 노력했습니다.
      - 기존 시스템과의 연동 관련 문제로 인해, 소통에 노력을 기울였습니다. 기존 서비스의 데이터베이스가 구 시스템을 포함하고 있었고, 테이블 간의 관계를 아는 방법이 제한적이었기 때문에, 배포 이후에도 해당 문제들을 반영하기 위해 많은 시간을 들였습니다.
      (예로, 결제 프로세스 정보를 반영하기 위한 정산 테이블이 여러 개로 분리되어 있었기 때문에, 해당 로직을 여러 번 수정했었습니다.)
      - 클라이언트의 다른 서비스에서 <mark>마이바티스</mark>를 사용 중이었으며, 이후의  클라이언트의 개발팀에서 통합 관리를 위해 해당 프레임워크로 개발을 진행했습니다.
      - PG사의 결제 시스템을 사용하여 <mark2>결제 및 정기결제 로직</mark2>을 구현, 기존시스템과 연동했습니다. 기존 시스템의 정기결제는 다른 2차 도메인에 구현되어 있었으며, 해당 로직은 프로시져로 동작하고 있었습니다. 따라서 따로 개발을 진행한다면 트랜잭션 처리에 문제가 생길 수 있다고 판단하여, 업체 개발팀의 프로시저를 수정을 요청하여, 새로 개발하는 홈페이지의 작업 또한 같이 이루어질 수 있도록 했습니다.
